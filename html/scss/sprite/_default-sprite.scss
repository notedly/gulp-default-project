// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$default-arr-delivery-btn-info-name: 'default-arr_delivery_btn_info';
$default-arr-delivery-btn-info-x: 58px;
$default-arr-delivery-btn-info-y: 0px;
$default-arr-delivery-btn-info-offset-x: -58px;
$default-arr-delivery-btn-info-offset-y: 0px;
$default-arr-delivery-btn-info-width: 8px;
$default-arr-delivery-btn-info-height: 14px;
$default-arr-delivery-btn-info-total-width: 66px;
$default-arr-delivery-btn-info-total-height: 46px;
$default-arr-delivery-btn-info-image: '../images/sprite/default.png';
$default-arr-delivery-btn-info: (58px, 0px, -58px, 0px, 8px, 14px, 66px, 46px, '../images/sprite/default.png', 'default-arr_delivery_btn_info', );
$default-arr-delivery-btn-info-highlight-name: 'default-arr_delivery_btn_info_highlight';
$default-arr-delivery-btn-info-highlight-x: 0px;
$default-arr-delivery-btn-info-highlight-y: 38px;
$default-arr-delivery-btn-info-highlight-offset-x: 0px;
$default-arr-delivery-btn-info-highlight-offset-y: -38px;
$default-arr-delivery-btn-info-highlight-width: 14px;
$default-arr-delivery-btn-info-highlight-height: 8px;
$default-arr-delivery-btn-info-highlight-total-width: 66px;
$default-arr-delivery-btn-info-highlight-total-height: 46px;
$default-arr-delivery-btn-info-highlight-image: '../images/sprite/default.png';
$default-arr-delivery-btn-info-highlight: (0px, 38px, 0px, -38px, 14px, 8px, 66px, 46px, '../images/sprite/default.png', 'default-arr_delivery_btn_info_highlight', );
$default-btn-slide-next-name: 'default-btn_slide_next';
$default-btn-slide-next-x: 0px;
$default-btn-slide-next-y: 0px;
$default-btn-slide-next-offset-x: 0px;
$default-btn-slide-next-offset-y: 0px;
$default-btn-slide-next-width: 19px;
$default-btn-slide-next-height: 28px;
$default-btn-slide-next-total-width: 66px;
$default-btn-slide-next-total-height: 46px;
$default-btn-slide-next-image: '../images/sprite/default.png';
$default-btn-slide-next: (0px, 0px, 0px, 0px, 19px, 28px, 66px, 46px, '../images/sprite/default.png', 'default-btn_slide_next', );
$default-btn-slide-prev-name: 'default-btn_slide_prev';
$default-btn-slide-prev-x: 29px;
$default-btn-slide-prev-y: 0px;
$default-btn-slide-prev-offset-x: -29px;
$default-btn-slide-prev-offset-y: 0px;
$default-btn-slide-prev-width: 19px;
$default-btn-slide-prev-height: 28px;
$default-btn-slide-prev-total-width: 66px;
$default-btn-slide-prev-total-height: 46px;
$default-btn-slide-prev-image: '../images/sprite/default.png';
$default-btn-slide-prev: (29px, 0px, -29px, 0px, 19px, 28px, 66px, 46px, '../images/sprite/default.png', 'default-btn_slide_prev', );
$default-width: 66px;
$default-height: 46px;
$default-image: '../images/sprite/default.png';
$default-sprites: ($default-arr-delivery-btn-info, $default-arr-delivery-btn-info-highlight, $default-btn-slide-next, $default-btn-slide-prev, );
$default: (66px, 46px, '../images/sprite/default.png', $default-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
